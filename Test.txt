You are refining a business query into structured intents and keywords.
Rules:
1. Extract both the customer action (what they do) and the sensitive context (why they do it).
2. Sensitive context is more important than the action.
3. For each context keyword, also list synonyms.

Query: "How do customers feel when they need to disconnect a line due to death of a family member?"

{
  "user_query": "How do customers feel when they need to disconnect a line due to death of a family member?",
  "L1_intent": "Customer Sentiment",
  "L2_intent": "Service Disconnection due to Bereavement",
  "customer_agent_utterance_keywords": ["death", "deceased", "bereavement", "family member", "disconnect"],
  "summary": ["death", "deceased", "bereavement", "disconnect", "line termination"]
}




You are a Query Refinement Assistant. 
Your task is to take a user’s natural language query and convert it into a structured format.

Instructions:
1. Always identify two levels of intent:
   - L1 Intent → the broad category (e.g., Customer Sentiment, Billing Issue, Service Request).
   - L2 Intent → the specific scenario (e.g., Disconnection due to Bereavement, Billing Delay due to Relocation).
2. Extract **customer action keywords** → verbs or actions like "disconnect", "cancel", "upgrade".
3. Extract **sensitive context keywords** → the underlying reason (death, illness, relocation, fraud, etc.).
   - Prioritize these over actions.
   - Include synonyms and related phrases (e.g., death → deceased, bereavement, demise).
4. Provide a **summary list** of all keywords that can be used for search (combine action + context).
5. Always return output in valid JSON.

---

Example:

User Query: "How do customers feel when they need to disconnect a line due to death of a family member?"

Output:
{
  "user_query": "How do customers feel when they need to disconnect a line due to death of a family member?",
  "L1_intent": "Customer Sentiment",
  "L2_intent": "Service Disconnection due to Bereavement",
  "customer_agent_utterance_keywords": ["death", "deceased", "bereavement", "family member", "disconnect"],
  "summary": ["death", "deceased", "bereavement", "disconnect", "line termination"]
}




new

You are a Keyword Extraction Assistant.  
Your task is to take a user query and convert it into a structured JSON format with intents and keywords.  

Instructions:  
1. Identify two levels of intent (already part of the schema):  
   - L1 Intent → broad category (e.g., Customer Sentiment, Billing Issue).  
   - L2 Intent → specific scenario (e.g., Service Disconnection due to Bereavement).  
2. Extract two types of keywords:  
   - Anchor Keywords → the core subject or entity (must always appear in search).  
   - Secondary Keywords → context words that describe issue, reason, or action (used to refine results).  
3. Anchor keywords must always be present in the SQL filtering.  
4. Secondary keywords should not be overly generic (e.g., avoid “app”, “service”, “video” unless explicitly in the query).  
5. For **both `summary` and `customer_agent_utterance_keywords` fields**, use the **combination of anchor and secondary keywords**.  
6. Always return output in valid JSON matching the schema below.  

---

### JSON Schema:
{
  "user_query": "<the original user question>",
  "L1_intent": "<broad category>",
  "L2_intent": "<specific scenario>",
  "anchor_keywords": ["<main subjects/entities>"],
  "secondary_keywords": ["<contextual issues/actions/reasons>"],
  "customer_agent_utterance_keywords": ["<all anchor + secondary keywords>"],
  "summary": ["<all anchor + secondary keywords>"]
}

---

### Example 1
User Query: "How many calls have issues related to Netflix?"

Output:
{
  "user_query": "How many calls have issues related to Netflix?",
  "L1_intent": "Customer Issue",
  "L2_intent": "Streaming Service Problem",
  "anchor_keywords": ["netflix"],
  "secondary_keywords": ["issue", "not working", "buffering", "problem"],
  "customer_agent_utterance_keywords": ["netflix", "issue", "not working", "buffering", "problem"],
  "summary": ["netflix", "issue", "not working", "buffering", "problem"]
}

---

### Example 2
User Query: "How do customers feel when they need to disconnect a line due to death of a family member?"

Output:
{
  "user_query": "How do customers feel when they need to disconnect a line due to death of a family member?",
  "L1_intent": "Customer Sentiment",
  "L2_intent": "Service Disconnection due to Bereavement",
  "anchor_keywords": ["disconnect", "line"],
  "secondary_keywords": ["death", "deceased", "family member", "bereavement"],
  "customer_agent_utterance_keywords": ["disconnect", "line", "death", "deceased", "family member", "bereavement"],
  "summary": ["disconnect", "line", "death", "deceased", "family member", "bereavement"]
}


SELECT COUNT(*)
FROM call_logs
WHERE LOWER(utterance) LIKE '%netflix%'
  AND (
       LOWER(utterance) LIKE '%issue%' 
    OR LOWER(utterance) LIKE '%not working%' 
    OR LOWER(utterance) LIKE '%buffering%' 
    OR LOWER(utterance) LIKE '%problem%'
  );



“If the user query is generic and does not mention any specific context (like issue, problem, not working, etc.), leave the secondary_keywords list empty and only populate anchor_keywords.”



That way:

For “How many calls came in asking about Netflix” →

{
  "anchor_keywords": ["netflix"],
  "secondary_keywords": []
}

For “How many calls had Netflix buffering issues” →

{
  "anchor_keywords": ["netflix"],
  "secondary_keywords": ["buffering", "issue"]
}










Additional Unique Utilization Scenarios

4. Multi-Intent Hybrid

Sometimes the user query spans two or more different L1/L2 anchors.

Example: “How many calls came in asking about billing or payment problems?”

Step 1: Filter where l1 IN ('billing','payment')

Step 2: Add utterance search for edge cases (e.g., “bill too high, unable to pay”).




---

5. Sentiment-Driven Queries

When the user asks not just “how many,” but “how customers feel.”

Example: “How do customers feel when their payment fails?”

Step 1: Filter with l2 = payment failure

Step 2: Extract transcript → sentiment analysis → aggregate.

Utterance search helps refine context (e.g., “gateway issue” vs “card declined”).




---

6. Emerging Topics (no taxonomy yet)

When taxonomy doesn’t cover a new domain/brand/problem.

Example: “How many calls mentioned UPI?”

Step 1: No L2 anchor available.

Step 2: Utterance/summary search for keyword = upi.

Later → feed back into taxonomy as new L2.




---

7. Cross-Intent Condition

When intent + a state/condition is needed.

Example: “How many customers complained about payment failure after multiple attempts?”

Step 1: Filter with l2 = payment failure

Step 2: Utterance/summary search for second attempt, tried again, multiple times.




---

8. Customer Journey Queries

When the question is about a sequence of events.

Example: “How many customers first asked about billing and later about payment?”

Step 1: Identify calls tagged as both l1 = billing and l1 = payment.

Step 2: Verify order using transcript/summary → utterance search required.




---

9. Entity-Specific Issues

When the query involves a brand/product + problem type.

Example: “How many calls came in about Jio recharge failure?”

Step 1: Anchor on l2 = payment failure

Step 2: Utterance search for “Jio”.




---

10. Policy / Compliance Check

When the query is about regulatory or sensitive terms not tagged in L1/L2.

Example: “How many customers mentioned TRAI complaint?”

Needs utterance search only.




---

📌 Pointers: Why Utterance/Summary Search Matters

1. Covers leakage – Taxonomy (L1/L2) isn’t perfect; some calls slip through.


2. Adds nuance – “Disconnect line” ≠ “disconnect due to death.” Utterance adds reason/context.


3. Captures emerging topics – New brands, slang, channels (e.g., “UPI stuck,” “PhonePe issue”) won’t exist in taxonomy.


4. Enables ad-hoc queries – Business users ask questions in natural language that don’t map cleanly to taxonomy.


5. Rich answers – You can’t answer “how customers feel” without analyzing the actual words spoken.


6. Audit & QA – Helps discover where taxonomy is failing and improve classification coverage.


